var Web3 = require("web3");

(function() {
  // Planned for future features, logging, etc.
  function Provider(provider) {
    this.provider = provider;
  }

  Provider.prototype.send = function() {
    this.provider.send.apply(this.provider, arguments);
  };

  Provider.prototype.sendAsync = function() {
    this.provider.sendAsync.apply(this.provider, arguments);
  };

  var BigNumber = (new Web3()).toBigNumber(0).constructor;

  var Utils = {
    is_object: function(val) {
      return typeof val == "object" && !Array.isArray(val);
    },
    is_big_number: function(val) {
      if (typeof val != "object") return false;

      // Instanceof won't work because we have multiple versions of Web3.
      try {
        new BigNumber(val);
        return true;
      } catch (e) {
        return false;
      }
    },
    merge: function() {
      var merged = {};
      var args = Array.prototype.slice.call(arguments);

      for (var i = 0; i < args.length; i++) {
        var object = args[i];
        var keys = Object.keys(object);
        for (var j = 0; j < keys.length; j++) {
          var key = keys[j];
          var value = object[key];
          merged[key] = value;
        }
      }

      return merged;
    },
    promisifyFunction: function(fn, C) {
      var self = this;
      return function() {
        var instance = this;

        var args = Array.prototype.slice.call(arguments);
        var tx_params = {};
        var last_arg = args[args.length - 1];

        // It's only tx_params if it's an object and not a BigNumber.
        if (Utils.is_object(last_arg) && !Utils.is_big_number(last_arg)) {
          tx_params = args.pop();
        }

        tx_params = Utils.merge(C.class_defaults, tx_params);

        return new Promise(function(accept, reject) {
          var callback = function(error, result) {
            if (error != null) {
              reject(error);
            } else {
              accept(result);
            }
          };
          args.push(tx_params, callback);
          fn.apply(instance.contract, args);
        });
      };
    },
    synchronizeFunction: function(fn, C) {
      var self = this;
      return function() {
        var args = Array.prototype.slice.call(arguments);
        var tx_params = {};
        var last_arg = args[args.length - 1];

        // It's only tx_params if it's an object and not a BigNumber.
        if (Utils.is_object(last_arg) && !Utils.is_big_number(last_arg)) {
          tx_params = args.pop();
        }

        tx_params = Utils.merge(C.class_defaults, tx_params);

        return new Promise(function(accept, reject) {

          var callback = function(error, tx) {
            if (error != null) {
              reject(error);
              return;
            }

            var timeout = C.synchronization_timeout || 240000;
            var start = new Date().getTime();

            var make_attempt = function() {
              C.web3.eth.getTransactionReceipt(tx, function(err, receipt) {
                if (err) return reject(err);

                if (receipt != null) {
                  return accept(tx, receipt);
                }

                if (timeout > 0 && new Date().getTime() - start > timeout) {
                  return reject(new Error("Transaction " + tx + " wasn't processed in " + (timeout / 1000) + " seconds!"));
                }

                setTimeout(make_attempt, 1000);
              });
            };

            make_attempt();
          };

          args.push(tx_params, callback);
          fn.apply(self, args);
        });
      };
    }
  };

  function instantiate(instance, contract) {
    instance.contract = contract;
    var constructor = instance.constructor;

    // Provision our functions.
    for (var i = 0; i < instance.abi.length; i++) {
      var item = instance.abi[i];
      if (item.type == "function") {
        if (item.constant == true) {
          instance[item.name] = Utils.promisifyFunction(contract[item.name], constructor);
        } else {
          instance[item.name] = Utils.synchronizeFunction(contract[item.name], constructor);
        }

        instance[item.name].call = Utils.promisifyFunction(contract[item.name].call, constructor);
        instance[item.name].sendTransaction = Utils.promisifyFunction(contract[item.name].sendTransaction, constructor);
        instance[item.name].request = contract[item.name].request;
        instance[item.name].estimateGas = Utils.promisifyFunction(contract[item.name].estimateGas, constructor);
      }

      if (item.type == "event") {
        instance[item.name] = contract[item.name];
      }
    }

    instance.allEvents = contract.allEvents;
    instance.address = contract.address;
    instance.transactionHash = contract.transactionHash;
  };

  // Use inheritance to create a clone of this contract,
  // and copy over contract's static functions.
  function mutate(fn) {
    var temp = function Clone() { return fn.apply(this, arguments); };

    Object.keys(fn).forEach(function(key) {
      temp[key] = fn[key];
    });

    temp.prototype = Object.create(fn.prototype);
    bootstrap(temp);
    return temp;
  };

  function bootstrap(fn) {
    fn.web3 = new Web3();
    fn.class_defaults  = fn.prototype.defaults || {};

    // Set the network iniitally to make default data available and re-use code.
    // Then remove the saved network id so the network will be auto-detected on first use.
    fn.setNetwork("default");
    fn.network_id = null;
    return fn;
  };

  // Accepts a contract object created with web3.eth.contract.
  // Optionally, if called without `new`, accepts a network_id and will
  // create a new version of the contract abstraction with that network_id set.
  function Contract() {
    if (this instanceof Contract) {
      instantiate(this, arguments[0]);
    } else {
      var C = mutate(Contract);
      var network_id = arguments.length > 0 ? arguments[0] : "default";
      C.setNetwork(network_id);
      return C;
    }
  };

  Contract.currentProvider = null;

  Contract.setProvider = function(provider) {
    var wrapped = new Provider(provider);
    this.web3.setProvider(wrapped);
    this.currentProvider = provider;
  };

  Contract.new = function() {
    if (this.currentProvider == null) {
      throw new Error("StackExchangeBounty error: Please call setProvider() first before calling new().");
    }

    var args = Array.prototype.slice.call(arguments);

    if (!this.unlinked_binary) {
      throw new Error("StackExchangeBounty error: contract binary not set. Can't deploy new instance.");
    }

    var regex = /__[^_]+_+/g;
    var unlinked_libraries = this.binary.match(regex);

    if (unlinked_libraries != null) {
      unlinked_libraries = unlinked_libraries.map(function(name) {
        // Remove underscores
        return name.replace(/_/g, "");
      }).sort().filter(function(name, index, arr) {
        // Remove duplicates
        if (index + 1 >= arr.length) {
          return true;
        }

        return name != arr[index + 1];
      }).join(", ");

      throw new Error("StackExchangeBounty contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of StackExchangeBounty: " + unlinked_libraries);
    }

    var self = this;

    return new Promise(function(accept, reject) {
      var contract_class = self.web3.eth.contract(self.abi);
      var tx_params = {};
      var last_arg = args[args.length - 1];

      // It's only tx_params if it's an object and not a BigNumber.
      if (Utils.is_object(last_arg) && !Utils.is_big_number(last_arg)) {
        tx_params = args.pop();
      }

      tx_params = Utils.merge(self.class_defaults, tx_params);

      if (tx_params.data == null) {
        tx_params.data = self.binary;
      }

      // web3 0.9.0 and above calls new twice this callback twice.
      // Why, I have no idea...
      var intermediary = function(err, web3_instance) {
        if (err != null) {
          reject(err);
          return;
        }

        if (err == null && web3_instance != null && web3_instance.address != null) {
          accept(new self(web3_instance));
        }
      };

      args.push(tx_params, intermediary);
      contract_class.new.apply(contract_class, args);
    });
  };

  Contract.at = function(address) {
    if (address == null || typeof address != "string" || address.length != 42) {
      throw new Error("Invalid address passed to StackExchangeBounty.at(): " + address);
    }

    var contract_class = this.web3.eth.contract(this.abi);
    var contract = contract_class.at(address);

    return new this(contract);
  };

  Contract.deployed = function() {
    if (!this.address) {
      throw new Error("Cannot find deployed address: StackExchangeBounty not deployed or address not set.");
    }

    return this.at(this.address);
  };

  Contract.defaults = function(class_defaults) {
    if (this.class_defaults == null) {
      this.class_defaults = {};
    }

    if (class_defaults == null) {
      class_defaults = {};
    }

    var self = this;
    Object.keys(class_defaults).forEach(function(key) {
      var value = class_defaults[key];
      self.class_defaults[key] = value;
    });

    return this.class_defaults;
  };

  Contract.extend = function() {
    var args = Array.prototype.slice.call(arguments);

    for (var i = 0; i < arguments.length; i++) {
      var object = arguments[i];
      var keys = Object.keys(object);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var value = object[key];
        this.prototype[key] = value;
      }
    }
  };

  Contract.all_networks = {
  "default": {
    "abi": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "queryID",
            "type": "bytes32"
          },
          {
            "name": "result",
            "type": "string"
          }
        ],
        "name": "__callback",
        "outputs": [],
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "questions",
        "outputs": [
          {
            "name": "contractAddress",
            "type": "address"
          },
          {
            "name": "site",
            "type": "string"
          },
          {
            "name": "questionID",
            "type": "uint256"
          },
          {
            "name": "winnerAddress",
            "type": "address"
          },
          {
            "name": "winnerID",
            "type": "uint256"
          },
          {
            "name": "acceptedAnswerID",
            "type": "uint256"
          },
          {
            "name": "updateDelay",
            "type": "uint256"
          },
          {
            "name": "expiryDate",
            "type": "uint256"
          },
          {
            "name": "ownedFee",
            "type": "uint256"
          }
        ],
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "kill",
        "outputs": [],
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_i",
            "type": "uint256"
          },
          {
            "name": "_sponsorAddr",
            "type": "address"
          }
        ],
        "name": "getSponsorBalance",
        "outputs": [
          {
            "name": "sponsorBalance",
            "type": "uint256"
          }
        ],
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_questionID",
            "type": "uint256"
          },
          {
            "name": "_site",
            "type": "string"
          }
        ],
        "name": "handleQuestion",
        "outputs": [],
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_i",
            "type": "uint256"
          }
        ],
        "name": "increaseBounty",
        "outputs": [],
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "contractBalance",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "i",
            "type": "uint256"
          },
          {
            "name": "id",
            "type": "uint256"
          },
          {
            "name": "winnerID",
            "type": "uint256"
          },
          {
            "name": "winnerAddr",
            "type": "address"
          }
        ],
        "name": "setWinner",
        "outputs": [],
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_questionID",
            "type": "uint256"
          },
          {
            "name": "_site",
            "type": "string"
          }
        ],
        "name": "getAddressOfQuestion",
        "outputs": [
          {
            "name": "questionAddr",
            "type": "address"
          }
        ],
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_i",
            "type": "uint256"
          }
        ],
        "name": "getSponsors",
        "outputs": [
          {
            "name": "sponsorList",
            "type": "address[]"
          }
        ],
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "i",
            "type": "uint256"
          }
        ],
        "name": "fullfillContractEarly",
        "outputs": [],
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "index",
            "type": "bytes32"
          },
          {
            "name": "site",
            "type": "string"
          },
          {
            "name": "id",
            "type": "uint256"
          },
          {
            "name": "iterator",
            "type": "uint256"
          },
          {
            "name": "typeQ",
            "type": "uint256"
          }
        ],
        "name": "setQuery",
        "outputs": [],
        "type": "function"
      },
      {
        "inputs": [],
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "questionAddr",
            "type": "address"
          }
        ],
        "name": "QuestionAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [],
        "name": "BountyIncreased",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [],
        "name": "BountyPaid",
        "type": "event"
      }
    ],
    "unlinked_binary": "0x60606040526201518060075562278d00420160085560008054600160a060020a0319908116730591ae1673bf9021eaf19743a02c42daedae7f5a179091556002805490911633179055613300806100566000396000f3606060405236156100985760e060020a600035046327dc297e811461009a57806331b1b9781461018057806341c0e1b5146102ae57806343d826f3146102d55780637e927c551461031e578063854287a8146103835780638b7afe2e146103c3578063a06a0e61146103cc578063b2dff097146103f7578063ba450ab414610511578063cef4bde2146105ac578063f0cad196146105ce575b005b60408051602060046024803582810135601f8101859004850286018501909652858552610098958335959394604494939290920191819084018382808284375094965050505050505060006000600060006107cf60006000600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151915050600160a060020a038116821415611a9057611a3860005b6000600061277d731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed5b3b90565b6106826004356005805482908110156100025750600052600c027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3dba8101546000805160206132808339815191528201546000805160206132c08339815191528301546000805160206132608339815191528401547f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08501547f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db48601546000805160206132408339815191528701547f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db9880154600160a060020a03938416987f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db301979296949093169492909189565b610098600254600160a060020a039081163390911614156113435733600160a060020a0316ff5b61075760043560243560006005600050838154811015610002575050600160a060020a039091168152600c9091026000805160206132e083398151915201602052604090205490565b60408051602060046024803582810135601f8101859004850286018501909652858552610098958335959394604494939290920191819084018382808284375094965050505050505060008260001480610379575081516000145b1561134557610002565b6100986004355b600034600014806103b9575060058054839081101561000257600091825260208220600c909102016007015414155b1561158857610002565b61075760045481565b610098600435602435604435606435600254600160a060020a0390811633909116146116f957610002565b60408051602060046024803582810135601f810185900485028601850190965285855261076995833595939460449493929092019181908401838280828437509496505050505050506000805b60055481101561178b578360056000508281548110156100025790600052602060002090600c0201600050600401541480156117cc575082604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505060405180910390206000191660056000508281548110156100025790600052602060002090600c020160005060030160005060405180828054600181600116156101000203166002900480156117b95780601f106117975761010080835404028352918201916117b9565b610785600435604080516020810190915260008152600580548390811015610002575060005260408051600c8402600080516020613220833981519152018054602081810284018101909452808352919290919083018282801561059f57602002820191906000526020600020905b8154600160a060020a0316815260019190910190602001808311610580575b505050505090505b919050565b610098600435600254600160a060020a03908116339091161461180857610002565b60408051602060046024803582810135601f810185900485028601850190965285855261009895833595939460449493929092019181908401838280828437509496505093359350506064359150506084356000858152600660209081526040822080548751828552838520929360026101006001851615026000190190931692909204601f90810183900484019391928a019083901061184c57805160ff19168380011785555b5061187c929150610b25565b60408051600160a060020a03808c16825291810189905290871660608201526080810186905260a0810185905260c0810184905260e08101839052610100818101839052610120602083018181528b54600260018216159094026000190116929092049083018190526101408301908b9080156107405780601f1061071557610100808354040283529160200191610740565b820191906000526020600020905b81548152906001019060200180831161072357829003601f168201915b50509a505050505050505050505060405180910390f35b60408051918252519081900360200190f35b60408051600160a060020a039092168252519081900360200190f35b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f1509050019250505060405180910390f35b600160a060020a031633600160a060020a0316141580156108005750600254600160a060020a039081163390911614155b1561080a57610002565b6108cc856000611b0c8260006040805160208101909152600090819052828180805b83518110156108ae57603060f860020a028482815181101561000257016020015160f860020a9081900402600160f860020a031916108015906108995750603960f860020a028482815181101561000257016020015160f860020a9081900402600160f860020a03191611155b156128635781156128c45785600014156128bb575b60008611156108c157600a86900a909202915b509095945050505050565b60008781526006602052604081208054600182810154600284810154969a509398509650939450928316156101000260001901909216919091041480156109135750816000145b1561091d57610002565b60006005600050828154811015610002575050868152600c82026000805160206132a083398151915201602052604081205460ff1614156109c357845160001415610aa457604080518454602060026001831615610100026000190190921691909104601f8101829004820283018201909352828252610b3992859291879190830182828015610be75780601f10610bbc57610100808354040283529160200191610be7565b600160056000508281548110156100025750506000878152600c83026000805160206132a083398151915201602052604090205460ff161415610f9d578451600014158015610a125750600084115b1561107e57836005600050828154811015610002575060005250600c81026000805160206132c083398151915201849055604080518454602060026001831615610100026000190190921691909104601f8101829004820283018201909352828252610b3992859291879190830182828015610be75780601f10610bbc57610100808354040283529160200191610be7565b6000841115610b39578260056000508281548110156100025790600052602060002090600c02016000506003016000509080546001816001161561010002031660029004828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c5e57805485555b50610c9a9291505b80821115610db95760008155600101610b25565b6005805482908110156100025750506000868152600c82026000805160206132a08339815191520160209081526040808320805460ff19169055600690915281208054828255909190829060026001821615610100026000190190911604601f81901061132557505b505060006001820181905560029190910155505050505050565b820191906000526020600020905b815481529060010190602001808311610bca57829003601f168201915b5050505050835b60006000600060006000600060009250600560005087815481101561000257600091825260208220600c909102016007015414611b13576005805488908110156100025790600052602060002090600c02016000506006015460001415611c8057611cc660008a8a60028b610f1d565b82800160010185558215610b1d57600052602060002091601f016020900482015b82811115610b1d578254825591600101919060010190610c7f565b50508160056000508281548110156100025760008290527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db4600c8202019290925580546007549250839081101561000257600080516020613240833981519152600c82020192909255805460085492508390811015610002577f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db9600c8202019290925550506040518290849083906101e7806130198339018084815260200180602001838152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610de85780601f10610dbd57610100808354040283529160200191610de8565b5090565b820191906000526020600020905b815481529060010190602001808311610dcb57829003601f168201915b5050945050505050604051809103906000f06005805483908110156100025790600052602060002090600c02016000508054600160a060020a0319169091179055600580547f59900455c3bfedd9d98d96c1cda9bdf2d735c0273facbaef7b0df905de9c2611919083908110156100025790600052602060002090600c0201600050604080519154600160a060020a03168252519081900360200190a1604080518454602060026001831615610100026000190190921691909104601f8101829004820283018201909352828252610b3992600092869290918891830182828015610f145780601f10610ee957610100808354040283529160200191610f14565b820191906000526020600020905b815481529060010190602001808311610ef757829003601f168201915b50505050506001855b6040805160208101909152600080825230600160a060020a03163160045583811415611f1f57611f82606060405190810160405280602c815260200160008051602061320083398151915281526020017f322f7175657374696f6e732f00000000000000000000000000000000000000008152602001506120388861222a565b600260056000508281548110156100025750506000878152600c83026000805160206132a083398151915201602052604090205460ff161415611108578451600014158015610fec5750600084115b156111cc57836005600050828154811015610002575060005250600c810260008051602061328083398151915201849055604080518454602060026001831615610100026000190190921691909104601f8101829004820283018201909352828252610b3992859291879190830182828015610be75780601f10610bbc57610100808354040283529160200191610be7565b610b396005600050828154811015610002575060005260408051600c840260008051602061324083398151915201548654602060026001831615610100026000190190921691909104601f81018290048202840182019094528383529092869291889190830182828015610f145780601f10610ee957610100808354040283529160200191610f14565b6000855111801561111a57508451602a145b1561107e5761128e8560408051602081019091526000908190528181808060025b602a8110156126c957610100840293508350848181518110156100025790602001015160f860020a900460f860020a0260f860020a9004925082508481600101815181101561000257016020015160f860020a9081900481020491506061600160a060020a038416108015906111bb5750606683600160a060020a031611155b156126d45760561990920191612705565b610b396005600050828154811015610002575060005260408051600080516020613240833981519152600c850201548654602060026001831615610100026000190190921691909104601f810182900482028401820190945283835290928692918891908301828280156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b5050505050600285610f1d565b6005805483908110156100025750600052600c8202600080516020613260833981519152018054600160a060020a0319169091179055604080518454602060026001831615610100026000190190921691909104601f8101829004820283018201909352828252610b3992859291879190830182828015610be75780601f10610bbc57610100808354040283529160200191610be7565b601f016020900490600052602060002090810190610ba29190610b25565b565b5060005b600554811015611451578260056000508281548110156100025790600052602060002090600c02016000506004015414801561144b575081604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505060405180910390206000191660056000508281548110156100025790600052602060002090600c020160005060030160005060405180828054600181600116156101000203166002900480156114385780601f10611416576101008083540402835291820191611438565b820191906000526020600020905b815481529060010190602001808311611424575b5050915050604051809103902060001916145b15611492575b60055481141561149a5760058054600181018083559091908280158290116114a357600c0281600c0283600052602060002091820191016114a39190611522565b600101611349565b6115838161038a565b50506005546003555061157490508161038a565b5060038201600050805460018160011615610100020316600290046000825580601f1061155657505b5050600060048201819055600582018054600160a060020a031916905560068201819055600782018190556008820181905560098201819055600a820155600c015b80821115610db9578054600160a060020a03191681556001810180546000808355918252602082206114b791810190610b25565b601f0160209004906000526020600020908101906114e09190610b25565b61158360008484600085610f1d565b505050565b33905060056000508281548110156100025750600052600c82027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154600160a060020a03828116911614156115db5750325b600580548390811015610002575050600160a060020a0381166000908152600c83026000805160206132e0833981519152016020526040812054141561168e576005805483908110156100025750600052600c820260008051602061322083398151915201805460018101808355828183801582901161166e5781836000526020600020918201910161166e9190610b25565b5050506000928352506020909120018054600160a060020a031916821790555b3460056000508381548110156100025760009182526020808320600160a060020a0386168452600c9092029190910160020190526040808220805490930190925590517fec2c7bf634749fe44e213f4be1cc466f0fb623b697b1ee7ca8a28d924ace5dce9190a15050565b8260056000508581548110156100025760008290526000805160206132c0833981519152600c820201929092558054849250869081101561000257600080516020613280833981519152600c820201929092558054839250869081101561000257505050600080516020613260833981519152600c909402939093018054600160a060020a0319169093179092555050565b600091505b5092915050565b820191906000526020600020905b8154815290600101906020018083116117a5575b5050915050604051809103902060001916145b15611800576005805482908110156100025790600052602060002090600c020160005054600160a060020a03169150611790565b600101610444565b60408051808201909152600881527f776861746576657200000000000000000000000000000000000000000000000060208201526118499060019083610bee565b50565b82800160010185558215610676579182015b8281111561067657825182600050559160200191906001019061185e565b50506000868152600660205260408120600181018690556002018490558214156118a8575060006118d7565b81600114156118b9575060016118d7565b81600214156118ca575060026118d7565b81600314156118d7575060035b8260010160056000508181548183558181151161190d57600c0281600c02836000526020600020918201910161190d91906119e6565b50505050806005600050848154811015610002576000898152600c82026000805160206132a08339815191520160205260409020805460ff191690931790925580546201869f925085908110156100025790600052602060002090600c020160005060080155505050505050565b5060038201600050805460018160011615610100020316600290046000825580601f10611a1a57505b5050600060048201819055600582018054600160a060020a031916905560068201819055600782018190556008820181905560098201819055600a820155600c015b80821115610db9578054600160a060020a031916815560018101805460008083559182526020822061197b91810190610b25565b601f0160209004906000526020600020908101906119a49190610b25565b50600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518160e060020a0281526004018090506020604051808303816000876161da5a03f115610002575050604051519150505b60018054600160a060020a031916821790819055604080517fc281d19e0000000000000000000000000000000000000000000000000000000081529051600160a060020a03929092169163c281d19e9160048181019260209290919082900301816000876161da5a03f115610002575050604051519250505090565b90506105a7565b600580548890811015610002575080546000829052600080516020613220833981519152600c8a020154975087919089908110156100025750505050600c86027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3dba0154859004935060005b85811015611e80576005805488908110156100025790600052602060002090600c0201600050600201600050600060056000508981548110156100025760206000908120929052600c020160010180548490811015610002579060005260206000209001600090546101009190910a9004600160a060020a031681526020810191909152600580546040929092016000205487900395509088908110156100025790600052602060002090600c020160005060010180548290811015610002579060005260206000209001600060405191546101009190910a9004600160a060020a031690600090869082818181858883f193505050501515611f1757610002565b60058054889081101561000257506000908152600080516020613260833981519152600c89020154600160a060020a03161415611ccb57611cc660008a8a60038b610f1d565b611e80565b600580548890811015610002575080546000829052600080516020613220833981519152600c8a0201549750879190899081101561000257505050600c87027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3dba01548690049450600091505b85821015611e8b578460056000508881548110156100025750805460008281526000805160206132e0833981519152600c8c02019290918b90811015610002575050600080516020613220833981519152600c8b020180548690811015610002575081526020808220860154600160a060020a03168252919091526040902080549190910390556005805488908110156100025750805460008281526000805160206132e0833981519152600c8b02019290918a90811015610002575050600080516020613220833981519152600c8a020180548590811015610002579060005260206000209001600090546101009190910a9004600160a060020a031681526020810191909152604001600020549092019160019190910190611d37565b6040517f0e92da90da1174eddb35ae51eee8f788e8cd514c9e4fa1f0486b0204a02bd49d90600090a15b505050505050505050565b426005600050888154811015610002575060008190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db9600c8a02019190915580548890811015610002575050604051600080516020613260833981519152600c89020154600160a060020a031690600090859082818181858883f193505050501515611e5657610002565b600101611b7e565b60018414156121a457612310606060405190810160405280602c815260200160008051602061320083398151915281526020017f322f7175657374696f6e732f00000000000000000000000000000000000000008152602001506120388861222a565b6040805180820182526003815260ea60020a6215549302602082810191909152825180840184526005815260db60020a640d4e6dedc502818301528351808501909452601784527f292e6974656d732e302e6372656174696f6e5f646174650000000000000000009184019190915292945061228e929091612295919086905b60408051602081810183526000808352835180830185528181528451928301909452815290916129a1918691869186919061209d565b60408051808201909152600681527f3f736974653d000000000000000000000000000000000000000000000000000060208201528860206040519081016040528060008152602001506129988585858560206040519081016040528060008152602001505b60408051602081810183526000808352835180830185528190528351808301855281905283518083018552819052835180830185528190528351808301855281905283518083018552818152845192830185528183528551875189518b518d51985197988e988e988e988e988e9890979296919586950190910190910101908059106121265750595b90808252806020026020018201604052801561213d575b50935083925060009150600090505b8851811015612e9557888181518110156100025790602001015160f860020a900460f860020a028383806001019450815181101561000257906020010190600160f860020a031916908160001a90535060010161214c565b600284141561240f57612490606060405190810160405280602a815260200160008051602061320083398151915281526020017f322f616e73776572732f00000000000000000000000000000000000000000000815260200150612038600560005086815481101561000257506000526000805160206132c0833981519152600c870201545b604080516020818101835260008083528351918201909352828152909190819081858114156129015760408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015294506128f8565b9050612517565b6207a120600060006000600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151915050600160a060020a038116821415612a01576129a9600061015f565b6040805180820182526003815260ea60020a6215549302602082810191909152825180840184526005815260db60020a640d4e6dedc502818301528351808501909452601c84527f292e6974656d732e302e61636365707465645f616e737765725f6964000000009184019190915292945061228e928a9261239491908790612002565b6207a120600060006000600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151915050600160a060020a038116821415612c7757612c1f600061015f565b6125ef6060604051908101604052806028815260200160008051602061320083398151915281526020017f322f75736572732f00000000000000000000000000000000000000000000000081526020015061203860056000508681548110156100025750600052600080516020613280833981519152600c8702015461222a565b6040805180820182526003815260ea60020a6215549302602082810191909152825180840184526005815260db60020a640d4e6dedc502818301528351808501909452601784527f292e6974656d732e302e6f776e65722e757365725f69640000000000000000009184019190915292945061228e928a9261239491908790612002565b90505b30600160a060020a0316316004600050540360056000508481548110156100025790600052602060002090600c0201600050600a01805490910190556005805485919085908110156100025790600052602060002090600c02016000506000838152600b90910160209081526040808320805460ff1916909417909355600681529181208751815482845292849020919360026001851615610100026000190190941693909304601f9081018490048301939192918a019083901061267357805160ff19168380011785555b506126a3929150610b25565b6040805180820182526003815260ea60020a6215549302602082810191909152825180840184526005815260db60020a640d4e6dedc502818301528351808501909452601284527f292e6974656d732e302e6c6f636174696f6e000000000000000000000000000091840191909152929450612514928a9261239491908790612002565b828001600101855582156125e3579182015b828111156125e3578251826000505591602001919060010190612685565b505060008181526006602052604090206001810187905560020183905550505050505050565b509195945050505050565b603083600160a060020a0316101580156126f85750603983600160a060020a031611155b1561270557602f19909201915b606182600160a060020a0316101580156127295750606682600160a060020a031611155b1561273a576056199091019061276b565b603082600160a060020a03161015801561275e5750603982600160a060020a031611155b1561276b57602f19909101905b6010830282019093019260020161113b565b11156127b3575060008054731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600160a060020a031990911617905560016105a7565b60006127d2739efbea6358bed926b293d2ce63a730d6d98d43dd61017c565b1115612808575060008054739efbea6358bed926b293d2ce63a730d6d98d43dd600160a060020a031990911617905560016105a7565b60006128277320e12a1f859b3feae5fb2a0a32c18f5a65555bbf61017c565b111561285b575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016105a7565b5060006105a7565b8381815181101561000257016020015160f860020a9081900402600160f860020a0319167f2e0000000000000000000000000000000000000000000000000000000000000014156128b357600191505b60010161082c565b60001995909501945b600a83029250825060308482815181101561000257016020015160f860020a9081900481020403909201916128b3565b8194505b50505050919050565b8593505b6000841461291f57600a9093049260019290920191612905565b8260405180591061292d5750595b908082528060200260200182016040528015612944575b5091505060001982015b600086146128f457600a860660300160f860020a02828280600190039350815181101561000257906020010190600160f860020a031916908160001a905350600a9095049461294e565b95945050505050565b949350505050565b50600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518160e060020a0281526004018090506020604051808303816000876161da5a03f115610002575050604051519150505b60018054600160a060020a0319168217908190556040805160e260020a630bbceb33028152602481018790526004818101928352895160448301528951600160a060020a039490941693632ef3accc938b938a939192839260649290920191602087810192918291859183918691600091601f850104600302600f01f150905090810190601f168015612aa85780820380516001836020036101000a031916815260200191505b5093505050506020604051808303816000876161da5a03f11561000257505060405151925050670de0b6b3a76400003a850201821115612af05750600091505b509392505050565b600160009054906101000a9004600160a060020a0316600160a060020a031663c51be90f8360008989896040518660e060020a0281526004018085815260200180602001806020018481526020018381038352868181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015612b965780820380516001836020036101000a031916815260200191505b508381038252858181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015612bef5780820380516001836020036101000a031916815260200191505b50965050505050505060206040518083038185886185025a03f115610002575050604051519450612ae892505050565b50600060009054906101000a9004600160a060020a0316600160a060020a03166338cc48316040518160e060020a0281526004018090506020604051808303816000876161da5a03f115610002575050604051519150505b60018054600160a060020a0319168217908190556040805160e260020a630bbceb33028152602481018790526004818101928352895160448301528951600160a060020a039490941693632ef3accc938b938a939192839260649290920191602087810192918291859183918691600091601f850104600302600f01f150905090810190601f168015612d1e5780820380516001836020036101000a031916815260200191505b5093505050506020604051808303816000876161da5a03f11561000257505060405151925050670de0b6b3a76400003a850201821115612d675750600091505b50949350505050565b600160009054906101000a9004600160a060020a0316600160a060020a031663c51be90f83898989896040518660e060020a0281526004018085815260200180602001806020018481526020018381038352868181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015612e0c5780820380516001836020036101000a031916815260200191505b508381038252858181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015612e655780820380516001836020036101000a031916815260200191505b50965050505050505060206040518083038185886185025a03f115610002575050604051519450612d5e92505050565b5060005b8751811015612ef157878181518110156100025790602001015160f860020a900460f860020a028383806001019450815181101561000257906020010190600160f860020a031916908160001a905350600101612e99565b5060005b8651811015612f4d57868181518110156100025790602001015160f860020a900460f860020a028383806001019450815181101561000257906020010190600160f860020a031916908160001a905350600101612ef5565b5060005b8551811015612fa957858181518110156100025790602001015160f860020a900460f860020a028383806001019450815181101561000257906020010190600160f860020a031916908160001a905350600101612f51565b5060005b845181101561300557848181518110156100025790602001015160f860020a900460f860020a028383806001019450815181101561000257906020010190600160f860020a031916908160001a905350600101612fad565b50909d9c50505050505050505050505050560060606040526040516101e73803806101e783398101604052805160805160a0519192019060008054600160a060020a0319163317815560018481556002805485519382905290926020601f93831615610100026000190190921684900483018290047f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9081019391929091908701908390106100be57805160ff19168380011785555b506100ee9291505b8082111561010357600081556001016100aa565b828001600101855582156100a2579182015b828111156100a25782518260005055916020019190600101906100d0565b50506003555060e09050806101076000396000f35b50905660606040523615600a575b606360003460001480601e57506001546000145b80603a5750600280546000196101006001831615020116046000145b80605b57506000805473ffffffffffffffffffffffffffffffffffffffff16145b156065576002565b005b5060008054600354604080517f854287a800000000000000000000000000000000000000000000000000000000815260048101929092525173ffffffffffffffffffffffffffffffffffffffff90921692839263854287a89234926024828101939192829003018185886185025a03f11560025750505050505668747470733a2f2f6170692e737461636b65786368616e67652e636f6d2f322e036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db8036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db5036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db6036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3dbb036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db7036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db2",
    "updated_at": 1472648576209,
    "links": {},
    "address": "0x20f47cf4692963cbcbe8b209a5d6fd840f7bc243"
  }
};

  Contract.checkNetwork = function(callback) {
    var self = this;

    if (this.network_id != null) {
      return callback();
    }

    this.web3.version.network(function(err, result) {
      if (err) return callback(err);

      var network_id = result.toString();

      // If we have the main network,
      if (network_id == "1") {
        var possible_ids = ["1", "live", "default"];

        for (var i = 0; i < possible_ids.length; i++) {
          var id = possible_ids[i];
          if (Contract.all_networks[id] != null) {
            network_id = id;
            break;
          }
        }
      }

      if (self.all_networks[network_id] == null) {
        return callback(new Error(self.name + " error: Can't find artifacts for network id '" + network_id + "'"));
      }

      self.setNetwork(network_id);
      callback();
    })
  };

  Contract.setNetwork = function(network_id) {
    var network = this.all_networks[network_id] || {};

    this.abi             = this.prototype.abi             = network.abi;
    this.unlinked_binary = this.prototype.unlinked_binary = network.unlinked_binary;
    this.address         = this.prototype.address         = network.address;
    this.updated_at      = this.prototype.updated_at      = network.updated_at;
    this.links           = this.prototype.links           = network.links || {};

    this.network_id = network_id;
  };

  Contract.networks = function() {
    return Object.keys(this.all_networks);
  };

  Contract.link = function(name, address) {
    if (typeof name == "object") {
      Object.keys(name).forEach(function(n) {
        var a = name[n];
        Contract.link(n, a);
      });
      return;
    }

    Contract.links[name] = address;
  };

  Contract.contract_name   = Contract.prototype.contract_name   = "StackExchangeBounty";
  Contract.generated_with  = Contract.prototype.generated_with  = "3.1.2";

  var properties = {
    binary: function() {
      var binary = Contract.unlinked_binary;

      Object.keys(Contract.links).forEach(function(library_name) {
        var library_address = Contract.links[library_name];
        var regex = new RegExp("__" + library_name + "_*", "g");

        binary = binary.replace(regex, library_address.replace("0x", ""));
      });

      return binary;
    }
  };

  Object.keys(properties).forEach(function(key) {
    var getter = properties[key];

    var definition = {};
    definition.enumerable = true;
    definition.configurable = false;
    definition.get = getter;

    Object.defineProperty(Contract, key, definition);
    Object.defineProperty(Contract.prototype, key, definition);
  });

  bootstrap(Contract);

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of this contract in the browser,
    // and we can use that.
    window.StackExchangeBounty = Contract;
  }
})();

"use strict";
var Question = (function () {
    function Question(oraclizeQuestion, seQuestion, sponsors, totalBounty, index) {
        this.contractAddr = oraclizeQuestion[0];
        this.site = oraclizeQuestion[1];
        this.questionID = oraclizeQuestion[2];
        this.winnerAddr = oraclizeQuestion[3];
        this.winnerID = oraclizeQuestion[4];
        this.acceptedAnswerID = oraclizeQuestion[5];
        this.updateDelay = oraclizeQuestion[6];
        this.expiryDate = parseInt(oraclizeQuestion[7]);
        this.ownedFee = oraclizeQuestion[8];
        this.exists = seQuestion.items.length > 0;
        var items = seQuestion.items[0];
        this.title = items.title;
        this.body = items.body;
        this.link = items.link;
        this.owner = items.owner;
        var _a = this.setQuestionText(this.winnerAddr, this.expiryDate), text = _a[0], info = _a[1];
        this.text = text;
        this.info = info;
        this.sponsors = sponsors;
        this.totalBounty = totalBounty;
        this.index = index;
    }
    Question.prototype.setQuestionText = function (winnerAddr, expiryDate) {
        var now = new Date().getTime() / 1000;
        var text;
        var info;
        if (this.addressIsNone(winnerAddr) && now < expiryDate) {
            text = 'Expires:';
            info = new Date(expiryDate * 1000).toLocaleDateString();
        }
        else if (!this.addressIsNone(winnerAddr)) {
            text = 'Status:';
            info = 'Completed';
        }
        else {
            text = 'Status:';
            info = 'Expired';
        }
        return [text, info];
    };
    Question.prototype.addressIsNone = function (address) {
        return address === '0x0000000000000000000000000000000000000000';
    };
    return Question;
}());
exports.Question = Question;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvcXVlc3Rpb24vcXVlc3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0lBcUJJLGtCQUFZLGdCQUFxQixFQUFFLFVBQWUsRUFBRSxRQUFlLEVBQUUsV0FBbUIsRUFBRSxLQUFhO1FBQ25HLElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDMUMsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBQSwyREFBeUUsRUFBcEUsWUFBSSxFQUFFLFlBQUksQ0FBMkQ7UUFDMUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELGtDQUFlLEdBQWYsVUFBZ0IsVUFBa0IsRUFBRSxVQUFrQjtRQUNsRCxJQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFDLElBQUksQ0FBQztRQUNwQyxJQUFJLElBQUksQ0FBQztRQUNULElBQUksSUFBSSxDQUFDO1FBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNyRCxJQUFJLEdBQUcsVUFBVSxDQUFDO1lBQ2xCLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekMsSUFBSSxHQUFHLFNBQVMsQ0FBQztZQUNqQixJQUFJLEdBQUcsV0FBVyxDQUFDO1FBQ3ZCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksR0FBRyxTQUFTLENBQUM7WUFDakIsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUNyQixDQUFDO1FBQ0QsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxnQ0FBYSxHQUFiLFVBQWMsT0FBZTtRQUN6QixNQUFNLENBQUMsT0FBTyxLQUFLLDRDQUE0QyxDQUFDO0lBQ3BFLENBQUM7SUFDTCxlQUFDO0FBQUQsQ0FqRUEsQUFpRUMsSUFBQTtBQWpFWSxnQkFBUSxXQWlFcEIsQ0FBQSIsImZpbGUiOiJhcHAvc2hhcmVkL3F1ZXN0aW9uL3F1ZXN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFF1ZXN0aW9uIHtcbiAgICBjb250cmFjdEFkZHI6IHN0cmluZztcbiAgICBzaXRlOiBzdHJpbmc7XG4gICAgcXVlc3Rpb25JRDogc3RyaW5nO1xuICAgIHdpbm5lckFkZHI6IHN0cmluZztcbiAgICB3aW5uZXJJRDogc3RyaW5nO1xuICAgIGFjY2VwdGVkQW5zd2VySUQ6IHN0cmluZztcbiAgICB1cGRhdGVEZWxheTogc3RyaW5nO1xuICAgIGV4cGlyeURhdGU6IG51bWJlcjtcbiAgICBvd25lZEZlZTogc3RyaW5nO1xuICAgIGV4aXN0czogYm9vbGVhbjtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGJvZHk6IHN0cmluZztcbiAgICBsaW5rOiBzdHJpbmc7XG4gICAgaW5mbzogc3RyaW5nO1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBvd25lcjogYW55O1xuICAgIHNwb25zb3JzOiBhbnlbXTtcbiAgICB0b3RhbEJvdW50eTogbnVtYmVyO1xuICAgIGluZGV4OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihvcmFjbGl6ZVF1ZXN0aW9uOiBhbnksIHNlUXVlc3Rpb246IGFueSwgc3BvbnNvcnM6IGFueVtdLCB0b3RhbEJvdW50eTogbnVtYmVyLCBpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY29udHJhY3RBZGRyID0gb3JhY2xpemVRdWVzdGlvblswXTtcbiAgICAgICAgdGhpcy5zaXRlID0gb3JhY2xpemVRdWVzdGlvblsxXTtcbiAgICAgICAgdGhpcy5xdWVzdGlvbklEID0gb3JhY2xpemVRdWVzdGlvblsyXTtcbiAgICAgICAgdGhpcy53aW5uZXJBZGRyID0gb3JhY2xpemVRdWVzdGlvblszXTtcbiAgICAgICAgdGhpcy53aW5uZXJJRCA9IG9yYWNsaXplUXVlc3Rpb25bNF07XG4gICAgICAgIHRoaXMuYWNjZXB0ZWRBbnN3ZXJJRCA9IG9yYWNsaXplUXVlc3Rpb25bNV07XG4gICAgICAgIHRoaXMudXBkYXRlRGVsYXkgPSBvcmFjbGl6ZVF1ZXN0aW9uWzZdO1xuICAgICAgICB0aGlzLmV4cGlyeURhdGUgPSBwYXJzZUludChvcmFjbGl6ZVF1ZXN0aW9uWzddKTtcbiAgICAgICAgdGhpcy5vd25lZEZlZSA9IG9yYWNsaXplUXVlc3Rpb25bOF07XG4gICAgICAgIHRoaXMuZXhpc3RzID0gc2VRdWVzdGlvbi5pdGVtcy5sZW5ndGggPiAwO1xuICAgICAgICBsZXQgaXRlbXMgPSBzZVF1ZXN0aW9uLml0ZW1zWzBdO1xuICAgICAgICB0aGlzLnRpdGxlID0gaXRlbXMudGl0bGU7XG4gICAgICAgIHRoaXMuYm9keSA9IGl0ZW1zLmJvZHk7XG4gICAgICAgIHRoaXMubGluayA9IGl0ZW1zLmxpbms7XG4gICAgICAgIHRoaXMub3duZXIgPSBpdGVtcy5vd25lcjtcbiAgICAgICAgbGV0IFt0ZXh0LCBpbmZvXSA9IHRoaXMuc2V0UXVlc3Rpb25UZXh0KHRoaXMud2lubmVyQWRkciwgdGhpcy5leHBpcnlEYXRlKTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgdGhpcy5pbmZvID0gaW5mbztcbiAgICAgICAgdGhpcy5zcG9uc29ycyA9IHNwb25zb3JzO1xuICAgICAgICB0aGlzLnRvdGFsQm91bnR5ID0gdG90YWxCb3VudHk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICBzZXRRdWVzdGlvblRleHQod2lubmVyQWRkcjogc3RyaW5nLCBleHBpcnlEYXRlOiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwO1xuICAgICAgICBsZXQgdGV4dDtcbiAgICAgICAgbGV0IGluZm87XG4gICAgICAgIGlmICh0aGlzLmFkZHJlc3NJc05vbmUod2lubmVyQWRkcikgJiYgbm93IDwgZXhwaXJ5RGF0ZSkge1xuICAgICAgICAgICAgdGV4dCA9ICdFeHBpcmVzOic7XG4gICAgICAgICAgICBpbmZvID0gbmV3IERhdGUoZXhwaXJ5RGF0ZSoxMDAwKS50b0xvY2FsZURhdGVTdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5hZGRyZXNzSXNOb25lKHdpbm5lckFkZHIpKSB7XG4gICAgICAgICAgICB0ZXh0ID0gJ1N0YXR1czonO1xuICAgICAgICAgICAgaW5mbyA9ICdDb21wbGV0ZWQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dCA9ICdTdGF0dXM6JztcbiAgICAgICAgICAgIGluZm8gPSAnRXhwaXJlZCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0ZXh0LCBpbmZvXTtcbiAgICB9XG5cbiAgICBhZGRyZXNzSXNOb25lKGFkZHJlc3M6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gYWRkcmVzcyA9PT0gJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc7XG4gICAgfVxufVxuIl19
